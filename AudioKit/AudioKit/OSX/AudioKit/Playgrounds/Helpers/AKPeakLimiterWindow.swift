//
//  AKPeakLimiterWindow.swift
//  AudioKit
//
//  Autogenerated by scripts by Aurelius Prochazka. Do not edit directly.
//  Copyright (c) 2015 Aurelius Prochazka. All rights reserved.
//

import Foundation
import Cocoa

/// A Window to control AKPeakLimiter in Playgrounds
public class AKPeakLimiterWindow: NSWindow {
    
    private let windowWidth = 400
    private let padding = 30
    private let sliderHeight = 20
    private let numberOfComponents = 3
    
    /// Slider to control attackTime
    public let attackTimeSlider: NSSlider
    /// Slider to control decayTime
    public let decayTimeSlider: NSSlider
    /// Slider to control preGain
    public let preGainSlider: NSSlider
    
    private let attackTimeTextField: NSTextField
    private let decayTimeTextField: NSTextField
    private let preGainTextField: NSTextField
    
    private var peakLimiter: AKPeakLimiter
    
    /// Initiate the AKPeakLimiter window
    public init(_ control: AKPeakLimiter) {
        peakLimiter = control
        let sliderWidth = windowWidth - 2 * padding
        
        attackTimeSlider = newSlider(sliderWidth)
        decayTimeSlider = newSlider(sliderWidth)
        preGainSlider = newSlider(sliderWidth)
        
        attackTimeTextField = newTextField(sliderWidth)
        decayTimeTextField = newTextField(sliderWidth)
        preGainTextField = newTextField(sliderWidth)
        
        let titleHeightApproximation = 50
        let windowHeight = padding * 2 + titleHeightApproximation + numberOfComponents * 3 * sliderHeight
        
        super.init(contentRect: NSRect(x: padding, y: padding, width: windowWidth, height: windowHeight),
            styleMask: NSTitledWindowMask,
            backing: .Buffered,
            `defer`: false)
        self.hasShadow = true
        self.styleMask = NSBorderlessWindowMask | NSResizableWindowMask
        self.movableByWindowBackground = true
        self.level = 7
        self.title = "AKPeakLimiter"
        
        let viewRect = NSRect(x: 0, y: 0, width: windowWidth, height: windowHeight)
        let view = NSView(frame: viewRect)
        
        let topTitle = NSTextField()
        topTitle.stringValue = "AKPeakLimiter"
        topTitle.editable = false
        topTitle.drawsBackground = false
        topTitle.bezeled = false
        topTitle.alignment = NSCenterTextAlignment
        topTitle.font = NSFont(name: "Lucida Grande", size: 24)
        topTitle.sizeToFit()
        topTitle.frame.origin.x = CGFloat(windowWidth / 2) - topTitle.frame.width / 2
        topTitle.frame.origin.y = CGFloat(windowHeight - padding) - topTitle.frame.height
        view.addSubview(topTitle)
        
        makeTextField(attackTimeTextField, view: view, below: topTitle, distance: 2,
            stringValue: "Attack Time: \(peakLimiter.attackTime) Secs")
        makeSlider(attackTimeSlider, view: view, below: topTitle, distance: 3, target: self,
            action: "updateAttacktime",
            currentValue: peakLimiter.attackTime,
            minimumValue: 0.001,
            maximumValue: 0.03)
        
        makeTextField(decayTimeTextField, view: view, below: topTitle, distance: 5,
            stringValue: "Decay Time: \(peakLimiter.decayTime) Secs")
        makeSlider(decayTimeSlider, view: view, below: topTitle, distance: 6, target: self,
            action: "updateDecaytime",
            currentValue: peakLimiter.decayTime,
            minimumValue: 0.001,
            maximumValue: 0.06)
        
        makeTextField(preGainTextField, view: view, below: topTitle, distance: 8,
            stringValue: "Pre Gain: \(peakLimiter.preGain) dB")
        makeSlider(preGainSlider, view: view, below: topTitle, distance: 9, target: self,
            action: "updatePregain",
            currentValue: peakLimiter.preGain,
            minimumValue: -40,
            maximumValue: 40)
        
        self.contentView!.addSubview(view)
        self.makeKeyAndOrderFront(nil)
    }
    
    internal func updateAttacktime() {
        peakLimiter.attackTime = attackTimeSlider.doubleValue
        attackTimeTextField.stringValue = "Attack Time \(String(format: "%0.4f", peakLimiter.attackTime)) Secs"
    }
    internal func updateDecaytime() {
        peakLimiter.decayTime = decayTimeSlider.doubleValue
        decayTimeTextField.stringValue = "Decay Time \(String(format: "%0.4f", peakLimiter.decayTime)) Secs"
    }
    internal func updatePregain() {
        peakLimiter.preGain = preGainSlider.doubleValue
        preGainTextField.stringValue = "Pre Gain \(String(format: "%0.4f", peakLimiter.preGain)) dB"
    }
    
    /// Required initializer
    required public init?(coder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
}

