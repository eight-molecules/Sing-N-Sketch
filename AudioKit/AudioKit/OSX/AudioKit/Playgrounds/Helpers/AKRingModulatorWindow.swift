//
//  AKRingModulatorWindow.swift
//  AudioKit
//
//  Autogenerated by scripts by Aurelius Prochazka. Do not edit directly.
//  Copyright (c) 2015 Aurelius Prochazka. All rights reserved.
//

import Foundation
import Cocoa

/// A Window to control AKRingModulator in Playgrounds
public class AKRingModulatorWindow: NSWindow {
    
    private let windowWidth = 400
    private let padding = 30
    private let sliderHeight = 20
    private let numberOfComponents = 4
    
    /// Slider to control ringModFreq1
    public let ringModFreq1Slider: NSSlider
    /// Slider to control ringModFreq2
    public let ringModFreq2Slider: NSSlider
    /// Slider to control ringModBalance
    public let ringModBalanceSlider: NSSlider
    /// Slider to control finalMix
    public let finalMixSlider: NSSlider
    
    private let ringModFreq1TextField: NSTextField
    private let ringModFreq2TextField: NSTextField
    private let ringModBalanceTextField: NSTextField
    private let finalMixTextField: NSTextField
    
    private var ringModulator: AKRingModulator
    
    /// Initiate the AKRingModulator window
    public init(_ control: AKRingModulator) {
        ringModulator = control
        let sliderWidth = windowWidth - 2 * padding
        
        ringModFreq1Slider = newSlider(sliderWidth)
        ringModFreq2Slider = newSlider(sliderWidth)
        ringModBalanceSlider = newSlider(sliderWidth)
        finalMixSlider = newSlider(sliderWidth)
        
        ringModFreq1TextField = newTextField(sliderWidth)
        ringModFreq2TextField = newTextField(sliderWidth)
        ringModBalanceTextField = newTextField(sliderWidth)
        finalMixTextField = newTextField(sliderWidth)
        
        let titleHeightApproximation = 50
        let windowHeight = padding * 2 + titleHeightApproximation + numberOfComponents * 3 * sliderHeight
        
        super.init(contentRect: NSRect(x: padding, y: padding, width: windowWidth, height: windowHeight),
            styleMask: NSTitledWindowMask,
            backing: .Buffered,
            `defer`: false)
        self.hasShadow = true
        self.styleMask = NSBorderlessWindowMask | NSResizableWindowMask
        self.movableByWindowBackground = true
        self.level = 7
        self.title = "AKRingModulator"
        
        let viewRect = NSRect(x: 0, y: 0, width: windowWidth, height: windowHeight)
        let view = NSView(frame: viewRect)
        
        let topTitle = NSTextField()
        topTitle.stringValue = "AKRingModulator"
        topTitle.editable = false
        topTitle.drawsBackground = false
        topTitle.bezeled = false
        topTitle.alignment = NSCenterTextAlignment
        topTitle.font = NSFont(name: "Lucida Grande", size: 24)
        topTitle.sizeToFit()
        topTitle.frame.origin.x = CGFloat(windowWidth / 2) - topTitle.frame.width / 2
        topTitle.frame.origin.y = CGFloat(windowHeight - padding) - topTitle.frame.height
        view.addSubview(topTitle)
        
        makeTextField(ringModFreq1TextField, view: view, below: topTitle, distance: 2,
            stringValue: "Frequency 1: \(ringModulator.frequency1) Hertz")
        makeSlider(ringModFreq1Slider, view: view, below: topTitle, distance: 3, target: self,
            action: "updateRingmodfreq1",
            currentValue: ringModulator.frequency1,
            minimumValue: 0.5,
            maximumValue: 8000)
        
        makeTextField(ringModFreq2TextField, view: view, below: topTitle, distance: 5,
            stringValue: "Frequency 2: \(ringModulator.frequency2) Hertz")
        makeSlider(ringModFreq2Slider, view: view, below: topTitle, distance: 6, target: self,
            action: "updateRingmodfreq2",
            currentValue: ringModulator.frequency2,
            minimumValue: 0.5,
            maximumValue: 8000)
        
        makeTextField(ringModBalanceTextField, view: view, below: topTitle, distance: 8,
            stringValue: "Balance: \(ringModulator.balance)")
        makeSlider(ringModBalanceSlider, view: view, below: topTitle, distance: 9, target: self,
            action: "updateRingmodbalance",
            currentValue: ringModulator.balance,
            minimumValue: 0,
            maximumValue: 1)
        
        makeTextField(finalMixTextField, view: view, below: topTitle, distance: 11,
            stringValue: "Mix: \(ringModulator.mix)")
        makeSlider(finalMixSlider, view: view, below: topTitle, distance: 12, target: self,
            action: "updateFinalmix",
            currentValue: ringModulator.mix,
            minimumValue: 0,
            maximumValue: 1)
        
        self.contentView!.addSubview(view)
        self.makeKeyAndOrderFront(nil)
    }
    
    internal func updateRingmodfreq1() {
        ringModulator.frequency1 = ringModFreq1Slider.doubleValue
        ringModFreq1TextField.stringValue = "Frequency 1 \(String(format: "%0.4f", ringModulator.frequency1)) Hertz"
    }
    internal func updateRingmodfreq2() {
        ringModulator.frequency2 = ringModFreq2Slider.doubleValue
        ringModFreq2TextField.stringValue = "Frequency 2 \(String(format: "%0.4f", ringModulator.frequency2)) Hertz"
    }
    internal func updateRingmodbalance() {
        ringModulator.balance = ringModBalanceSlider.doubleValue
        ringModBalanceTextField.stringValue = "Balance \(String(format: "%0.4f", ringModulator.balance))"
    }
    internal func updateFinalmix() {
        ringModulator.mix = finalMixSlider.doubleValue
        finalMixTextField.stringValue = "Mix \(String(format: "%0.4f", ringModulator.mix))"
    }
    
    /// Required initializer
    required public init?(coder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
}

